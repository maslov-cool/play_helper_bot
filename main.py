# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
# @game_by_coding_lover_bot --> –Ω–∏–∫ –≤ —Ç–≥
import logging
import random
from telegram import ReplyKeyboardMarkup
import asyncio
from telegram.ext import Application, CommandHandler


# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)
BOT_TOKEN = '7722897085:AAGx_nP3cZMhBfzD6sOdlOuMW-wtCykLbIU'

reply_keyboard = [['/dice', '/timer']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)


reply_keyboard_dice = [['/one_hexagonal_cube', '/two_hexagonal_cubes'],
                       ['/twenty_sided_cube', '/back']]
markup_dice = ReplyKeyboardMarkup(reply_keyboard_dice, one_time_keyboard=True)


reply_keyboard_timer = [['/thirty_seconds', '/one_minute'],
                       ['/five_minutes', '/back']]
markup_timer = ReplyKeyboardMarkup(reply_keyboard_timer, one_time_keyboard=True)


reply_keyboard_timer_time = [['/close']]
markup_timer_time = ReplyKeyboardMarkup(reply_keyboard_timer_time, one_time_keyboard=True)


async def start(update, context):
    await update.message.reply_text('''üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–≥—Ä üé≤‚è±
–í—ã–±–µ—Ä–∏, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:
- –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫
- –∑–∞—Å–µ—á—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è''', reply_markup=markup)


async def dice(update, context):
    await update.message.reply_text('''–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π –∫—É–±–∏–∫ –±—Ä–æ—Å–∏—Ç—å:
- üé≤ –∫–∏–Ω—É—Ç—å –æ–¥–∏–Ω —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫,
- üé≤üé≤ –∫–∏–Ω—É—Ç—å 2 —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ,
- üßä –∫–∏–Ω—É—Ç—å 20-–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫,
- üîô –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.''', reply_markup=markup_dice)


async def timer(update, context):
    await update.message.reply_text('''–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞:
- ‚è± 30 —Å–µ–∫—É–Ω–¥,
- ‚è± 1 –º–∏–Ω—É—Ç–∞,
- ‚è± 5 –º–∏–Ω—É—Ç,
- üîô –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥''', reply_markup=markup_timer)


async def one_hexagonal_cube(update, context):
    await update.message.reply_text('–ö–∏–¥–∞—é –æ–¥–∏–Ω —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫')
    await asyncio.sleep(1)
    await update.message.reply_text('...')
    await asyncio.sleep(1)
    await update.message.reply_text('üé≤ –í—ã–ø–∞–ª–æ: ' + str(random.randint(1, 6)))


async def two_hexagonal_cubes(update, context):
    await update.message.reply_text('''–ö–∏–¥–∞—é –¥–≤–∞ —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞''')
    await asyncio.sleep(1)
    await update.message.reply_text('...')
    await asyncio.sleep(1)
    await update.message.reply_text('üé≤ –í—ã–ø–∞–ª–æ: ' + str(random.randint(1, 6)) + ' –∏ ' + str(random.randint(1, 6)))


async def twenty_sided_cube(update, context):
    await update.message.reply_text('''–ö–∏–¥–∞—é 20-–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫''')
    await asyncio.sleep(1)
    await update.message.reply_text('...')
    await asyncio.sleep(1)
    await update.message.reply_text('üé≤ –í—ã–ø–∞–ª–æ: ' + str(random.randint(1, 20)))


async def thirty_seconds(update, context):
    await update.message.reply_text('‚è± –ó–∞—Å–µ–∫ 30 —Å–µ–∫—É–Ω–¥...', reply_markup=markup_timer_time)
    context.user_data['timer'] = 30
    await set_timer(update, context)


async def one_minute(update, context):
    await update.message.reply_text('''‚è± –ó–∞—Å–µ–∫ 1 –º–∏–Ω—É—Ç—É...''', reply_markup=markup_timer_time)
    context.user_data['timer'] = 60
    await set_timer(update, context)


async def five_minutes(update, context):
    await update.message.reply_text('''‚è± –ó–∞—Å–µ–∫ 5 –º–∏–Ω—É—Ç...''', reply_markup=markup_timer_time)
    context.user_data['timer'] = 300
    await set_timer(update, context)


async def back(update, context):
    await start(update, context)


def remove_job_if_exists(name, context):
    """–£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."""
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


# –û–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–∞–∫ –∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ.
async def set_timer(update, context):
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
    chat_id = update.effective_message.chat_id
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    # –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
    job_removed = remove_job_if_exists(str(chat_id), context)
    context.job_queue.run_once(task, context.user_data['timer'], chat_id=chat_id, name=str(chat_id),
                               data=context.user_data['timer'])

    text = f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {update.message.text.split()[1]} —Å.!'
    if job_removed:
        text += ' –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.'
    await update.effective_message.reply_text(text)


async def task(context):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await context.bot.send_message(context.job.chat_id, text=f'–ö–£–ö–£! {context.user_data['timer']}c. –ø—Ä–æ—à–ª–∏!')


async def unset_timer(update, context):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª"""
    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    text = '‚èπÔ∏è –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω.' if job_removed else '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤'
    await update.message.reply_text(text)
    await timer(update, context)


def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application.
    # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("timer", timer))
    application.add_handler(CommandHandler("close", unset_timer))
    application.add_handler(CommandHandler("dice", dice))
    application.add_handler(CommandHandler("one_hexagonal_cube", one_hexagonal_cube))
    application.add_handler(CommandHandler("two_hexagonal_cubes", two_hexagonal_cubes))
    application.add_handler(CommandHandler("twenty_sided_cube", twenty_sided_cube))
    application.add_handler(CommandHandler("thirty_seconds", thirty_seconds))
    application.add_handler(CommandHandler("one_minute", one_minute))
    application.add_handler(CommandHandler("five_minutes", five_minutes))
    application.add_handler(CommandHandler("back", back))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()


